// <auto-generated />
using AzaklarApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AzaklarApi.Migrations
{
    [DbContext(typeof(AzaklarDbContext))]
    partial class AzaklarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AzaklarApi.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Konut",
                            Description = "Güngören'in en merkezi konumunda park ve İSPARK kapalı otoparka cepheli modern konut projesi.",
                            FullDescription = "Haznedar Park projesi, Güngören'in en merkezi konumlanmış modern bir yaşam alanıdır. Park manzaralı ve İSPARK kapalı otoparka cepheli bu özel projemiz, 2 blok halinde tasarlanmış olup toplamda 16 daire barındırmaktadır.",
                            Location = "Güngören, İstanbul",
                            Slug = "haznedar-park",
                            Status = 2,
                            Title = "Haznedar Park",
                            Year = "2023"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Konut",
                            Description = "İstanbul Bağcılar Meydan'da konumlanmış modern yaşam projemiz.",
                            FullDescription = "Bağcılar Meydan Life projesi, İstanbul Bağcılar Meydan'da konumlanmış modern yaşam projemizdir. 12 katlı yapımızda 28 adet 3+1 daire, 2 ticari dükkan ve 3 katlı kapalı otopark bulunmaktadır.",
                            Location = "Bağcılar, İstanbul",
                            Slug = "bagcilar-meydan-life",
                            Status = 2,
                            Title = "Bağcılar Meydan Life",
                            Year = "2023"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Restorasyon",
                            Description = "Tarihi Fatih semtinde restorasyon projesi.",
                            FullDescription = "Fatih Gülbahçe Konağı, tarihi Fatih semtinde bulunan tarihi bir konak restorasyon projesidir. Geleneksel mimari öğeleri korunarak modern yaşam standartlarına uygun hale getirilmiştir.",
                            Location = "Fatih, İstanbul",
                            Slug = "fatih-gulbahce-konagi",
                            Status = 2,
                            Title = "Fatih Gülbahçe Konağı",
                            Year = "2022"
                        });
                });

            modelBuilder.Entity("AzaklarApi.Models.ProjectFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Feature = "Park manzaralı konumlanma",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Feature = "İSPARK kapalı otopark erişimi",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Feature = "2 blok modern tasarım",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            Feature = "Merkezi konum avantajı",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            Feature = "Modern altyapı sistemleri",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            Feature = "Meydan manzaralı konum",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 7,
                            Feature = "3 katlı kapalı otopark",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 8,
                            Feature = "Ticari dükkanlar",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 9,
                            Feature = "Modern yaşam alanları",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 10,
                            Feature = "Tarihi mimari korunması",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 11,
                            Feature = "Modern yaşam standartları",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 12,
                            Feature = "Geleneksel öğeler",
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("AzaklarApi.Models.ProjectImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectImages");
                });

            modelBuilder.Entity("AzaklarApi.Models.ProjectStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectStats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "İnşaat Alanı",
                            ProjectId = 1,
                            Unit = "m²",
                            Value = "6500"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Daire",
                            ProjectId = 1,
                            Unit = "",
                            Value = "16"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Kat",
                            ProjectId = 1,
                            Unit = "",
                            Value = "6"
                        },
                        new
                        {
                            Id = 4,
                            Label = "İnşaat Alanı",
                            ProjectId = 2,
                            Unit = "m²",
                            Value = "12500"
                        },
                        new
                        {
                            Id = 5,
                            Label = "Daire",
                            ProjectId = 2,
                            Unit = "",
                            Value = "28"
                        },
                        new
                        {
                            Id = 6,
                            Label = "Kat",
                            ProjectId = 2,
                            Unit = "",
                            Value = "12"
                        },
                        new
                        {
                            Id = 7,
                            Label = "İnşaat Alanı",
                            ProjectId = 3,
                            Unit = "m²",
                            Value = "850"
                        },
                        new
                        {
                            Id = 8,
                            Label = "Konak",
                            ProjectId = 3,
                            Unit = "",
                            Value = "1"
                        },
                        new
                        {
                            Id = 9,
                            Label = "Kat",
                            ProjectId = 3,
                            Unit = "",
                            Value = "3"
                        });
                });

            modelBuilder.Entity("AzaklarApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "571632",
                            Username = "hasanazak"
                        });
                });

            modelBuilder.Entity("AzaklarApi.Models.ProjectFeature", b =>
                {
                    b.HasOne("AzaklarApi.Models.Project", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AzaklarApi.Models.ProjectImage", b =>
                {
                    b.HasOne("AzaklarApi.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AzaklarApi.Models.ProjectStat", b =>
                {
                    b.HasOne("AzaklarApi.Models.Project", "Project")
                        .WithMany("Stats")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AzaklarApi.Models.Project", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Images");

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
